name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: payroll_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        php: [8.2, 8.3]
        laravel: [12.*]

    name: PHP ${{ matrix.php }} - Laravel ${{ matrix.laravel }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_mysql, phar, tokenizer, xml, xmlwriter, zip
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mysql -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS payroll_test;"
        mysql -u root -ppassword -e "GRANT ALL PRIVILEGES ON payroll_test.* TO 'root'@'localhost';"

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: payroll_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: vendor/bin/phpunit

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  code-quality:
    runs-on: ubuntu-latest
    needs: tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_mysql, phar, tokenizer, xml, xmlwriter, zip

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Laravel Pint
      run: ./vendor/bin/pint --test

    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse

    - name: Run PHP CS Fixer
      run: ./vendor/bin/php-cs-fixer fix --dry-run --diff

  security:
    runs-on: ubuntu-latest
    needs: tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_mysql, phar, tokenizer, xml, xmlwriter, zip

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Run Security Check
      run: ./vendor/bin/security-checker security:check composer.lock

    - name: Run PHP Security Checker
      run: composer audit

  build:
    runs-on: ubuntu-latest
    needs: [tests, code-quality, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_mysql, phar, tokenizer, xml, xmlwriter, zip

    - name: Install Dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Create build artifact
      run: |
        mkdir -p build
        cp -r app build/
        cp -r bootstrap build/
        cp -r config build/
        cp -r database build/
        cp -r lang build/
        cp -r public build/
        cp -r resources build/
        cp -r routes build/
        cp -r storage build/
        cp -r vendor build/
        cp .env.example build/
        cp artisan build/
        cp composer.json build/
        cp composer.lock build/

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: payroll-system-build
        path: build/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: payroll-system-build
        path: ./staging

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, scp, or cloud platform deployment

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: payroll-system-build
        path: ./production

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: rsync, scp, or cloud platform deployment

  notify:
    runs-on: ubuntu-latest
    needs: [tests, code-quality, security]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ All checks passed successfully!"
        # Add notification logic (Slack, Discord, Email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Some checks failed!"
        # Add notification logic (Slack, Discord, Email, etc.)
